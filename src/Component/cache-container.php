<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class MyCachedContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'App\\Backend\\ImportCategory\\Business\\Model\\Create\\Category' => 'getCategoryService',
            'App\\Backend\\ImportCategory\\Business\\Model\\Importer' => 'getImporterService',
            'App\\Backend\\ImportCategory\\Business\\Model\\Update\\CategoryImporter' => 'getCategoryImporterService',
            'App\\Backend\\ImportComponent\\ImportFilterProvider' => 'getImportFilterProviderService',
            'App\\Backend\\ImportComponent\\Loader\\CsvImportLoader' => 'getCsvImportLoaderService',
            'App\\Backend\\ImportComponent\\Mapper\\CategoryMappingAssistant' => 'getCategoryMappingAssistantService',
            'App\\Backend\\ImportComponent\\StringConverter\\StringConverter' => 'getStringConverterService',
            'App\\Backend\\ImportProduct\\Business\\Model\\Create\\Product' => 'getProductService',
            'App\\Backend\\ImportProduct\\Business\\Model\\Importer' => 'getImporter2Service',
            'App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\CategoryIntegrityManager' => 'getCategoryIntegrityManagerService',
            'App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\ValueIntegrityManager' => 'getValueIntegrityManagerService',
            'App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductCategory' => 'getProductCategoryService',
            'App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductImporter' => 'getProductImporterService',
            'App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductInformation' => 'getProductInformationService',
            'App\\Client\\Category\\Business\\CategoryBusinessFacade' => 'getCategoryBusinessFacadeService',
            'App\\Client\\Category\\Persistence\\CategoryEntityManager' => 'getCategoryEntityManagerService',
            'App\\Client\\Category\\Persistence\\CategoryRepository' => 'getCategoryRepositoryService',
            'App\\Client\\Category\\Persistence\\Mapper\\CategoryMapper' => 'getCategoryMapperService',
            'App\\Client\\Product\\Business\\ProductBusinessFacade' => 'getProductBusinessFacadeService',
            'App\\Client\\Product\\Persistence\\Mapper\\ProductMapper' => 'getProductMapperService',
            'App\\Client\\Product\\Persistence\\ProductEntityManager' => 'getProductEntityManagerService',
            'App\\Client\\Product\\Persistence\\ProductRepository' => 'getProductRepositoryService',
            'App\\Client\\User\\Business\\UserBusinessFacade' => 'getUserBusinessFacadeService',
            'App\\Client\\User\\Persistence\\Mapper\\UserMapper' => 'getUserMapperService',
            'App\\Client\\User\\Persistence\\UserEntityManager' => 'getUserEntityManagerService',
            'App\\Client\\User\\Persistence\\UserRepository' => 'getUserRepositoryService',
            'App\\Component\\View' => 'getViewService',
            'App\\Frontend\\Login\\Communication\\LoginController' => 'getLoginControllerService',
            'App\\Frontend\\Login\\Communication\\PasswordController' => 'getPasswordControllerService',
            'App\\Frontend\\Model\\DetailController' => 'getDetailControllerService',
            'App\\Frontend\\Model\\ErrorController' => 'getErrorControllerService',
            'App\\Frontend\\Model\\HomeController' => 'getHomeControllerService',
            'App\\Frontend\\Model\\ListController' => 'getListControllerService',
            'App\\Frontend\\Product\\Business\\ProductManager' => 'getProductManagerService',
            'App\\Frontend\\Product\\Communication\\ProductController' => 'getProductControllerService',
            'App\\Frontend\\User\\Business\\UserManager' => 'getUserManagerService',
            'App\\Frontend\\User\\Communication\\DashboardController' => 'getDashboardControllerService',
            'App\\Frontend\\User\\Communication\\UserController' => 'getUserControllerService',
            'App\\Service\\DatabaseManager' => 'getDatabaseManagerService',
            'App\\Service\\File\\FileServiceClient' => 'getFileServiceClientService',
            'App\\Service\\File\\Model\\Get' => 'getGetService',
            'App\\Service\\File\\Model\\Move' => 'getMoveService',
            'App\\Service\\PasswordManager' => 'getPasswordManagerService',
            'App\\Service\\SessionUser' => 'getSessionUserService',
            'App\\Service\\SymfonyMailerManager' => 'getSymfonyMailerManagerService',
            'Symfony\\Component\\Finder\\Finder' => 'getFinderService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'App\\Backend\\ImportComponent\\Mapper\\ProductMappingAssistant' => true,
            'App\\Backend\\ImportProduct\\Business\\Model\\ActionProvider' => true,
            'Cycle\\ORM\\ORM' => true,
            'Psr\\Container\\ContainerInterface' => true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
        ];
    }

    /**
     * Gets the public 'App\Backend\ImportCategory\Business\Model\Create\Category' shared service.
     *
     * @return \App\Backend\ImportCategory\Business\Model\Create\Category
     */
    protected function getCategoryService()
    {
        return $this->services['App\\Backend\\ImportCategory\\Business\\Model\\Create\\Category'] = new \App\Backend\ImportCategory\Business\Model\Create\Category(($this->services['App\\Client\\Category\\Business\\CategoryBusinessFacade'] ?? $this->getCategoryBusinessFacadeService()));
    }

    /**
     * Gets the public 'App\Backend\ImportCategory\Business\Model\Importer' shared service.
     *
     * @return \App\Backend\ImportCategory\Business\Model\Importer
     */
    protected function getImporterService()
    {
        return $this->services['App\\Backend\\ImportCategory\\Business\\Model\\Importer'] = new \App\Backend\ImportCategory\Business\Model\Importer(($this->services['App\\Backend\\ImportComponent\\Loader\\CsvImportLoader'] ?? $this->getCsvImportLoaderService()), ($this->services['App\\Backend\\ImportCategory\\Business\\Model\\Create\\Category'] ?? $this->getCategoryService()), ($this->services['App\\Backend\\ImportCategory\\Business\\Model\\Update\\CategoryImporter'] ?? $this->getCategoryImporterService()), 'dirname(__DIR__, 2).\'../import/');
    }

    /**
     * Gets the public 'App\Backend\ImportCategory\Business\Model\Update\CategoryImporter' shared service.
     *
     * @return \App\Backend\ImportCategory\Business\Model\Update\CategoryImporter
     */
    protected function getCategoryImporterService()
    {
        return $this->services['App\\Backend\\ImportCategory\\Business\\Model\\Update\\CategoryImporter'] = new \App\Backend\ImportCategory\Business\Model\Update\CategoryImporter(($this->privates['App\\Backend\\ImportProduct\\Business\\Model\\ActionProvider'] ?? $this->getActionProviderService()));
    }

    /**
     * Gets the public 'App\Backend\ImportComponent\ImportFilterProvider' shared service.
     *
     * @return \App\Backend\ImportComponent\ImportFilterProvider
     */
    protected function getImportFilterProviderService()
    {
        return $this->services['App\\Backend\\ImportComponent\\ImportFilterProvider'] = new \App\Backend\ImportComponent\ImportFilterProvider();
    }

    /**
     * Gets the public 'App\Backend\ImportComponent\Loader\CsvImportLoader' shared service.
     *
     * @return \App\Backend\ImportComponent\Loader\CsvImportLoader
     */
    protected function getCsvImportLoaderService()
    {
        return $this->services['App\\Backend\\ImportComponent\\Loader\\CsvImportLoader'] = new \App\Backend\ImportComponent\Loader\CsvImportLoader(($this->services['App\\Service\\File\\FileServiceClient'] ?? $this->getFileServiceClientService()), new \App\Backend\ImportComponent\Mapper\ProductMappingAssistant(($this->services['App\\Backend\\ImportComponent\\StringConverter\\StringConverter'] ?? ($this->services['App\\Backend\\ImportComponent\\StringConverter\\StringConverter'] = new \App\Backend\ImportComponent\StringConverter\StringConverter())), ($this->services['App\\Backend\\ImportComponent\\ImportFilterProvider'] ?? ($this->services['App\\Backend\\ImportComponent\\ImportFilterProvider'] = new \App\Backend\ImportComponent\ImportFilterProvider()))));
    }

    /**
     * Gets the public 'App\Backend\ImportComponent\Mapper\CategoryMappingAssistant' shared service.
     *
     * @return \App\Backend\ImportComponent\Mapper\CategoryMappingAssistant
     */
    protected function getCategoryMappingAssistantService()
    {
        return $this->services['App\\Backend\\ImportComponent\\Mapper\\CategoryMappingAssistant'] = new \App\Backend\ImportComponent\Mapper\CategoryMappingAssistant(($this->services['App\\Backend\\ImportComponent\\StringConverter\\StringConverter'] ?? ($this->services['App\\Backend\\ImportComponent\\StringConverter\\StringConverter'] = new \App\Backend\ImportComponent\StringConverter\StringConverter())), ($this->services['App\\Backend\\ImportComponent\\ImportFilterProvider'] ?? ($this->services['App\\Backend\\ImportComponent\\ImportFilterProvider'] = new \App\Backend\ImportComponent\ImportFilterProvider())));
    }

    /**
     * Gets the public 'App\Backend\ImportComponent\StringConverter\StringConverter' shared service.
     *
     * @return \App\Backend\ImportComponent\StringConverter\StringConverter
     */
    protected function getStringConverterService()
    {
        return $this->services['App\\Backend\\ImportComponent\\StringConverter\\StringConverter'] = new \App\Backend\ImportComponent\StringConverter\StringConverter();
    }

    /**
     * Gets the public 'App\Backend\ImportProduct\Business\Model\Create\Product' shared service.
     *
     * @return \App\Backend\ImportProduct\Business\Model\Create\Product
     */
    protected function getProductService()
    {
        return $this->services['App\\Backend\\ImportProduct\\Business\\Model\\Create\\Product'] = new \App\Backend\ImportProduct\Business\Model\Create\Product(($this->services['App\\Client\\Product\\Business\\ProductBusinessFacade'] ?? $this->getProductBusinessFacadeService()));
    }

    /**
     * Gets the public 'App\Backend\ImportProduct\Business\Model\Importer' shared service.
     *
     * @return \App\Backend\ImportProduct\Business\Model\Importer
     */
    protected function getImporter2Service()
    {
        return $this->services['App\\Backend\\ImportProduct\\Business\\Model\\Importer'] = new \App\Backend\ImportProduct\Business\Model\Importer(($this->services['App\\Backend\\ImportComponent\\Loader\\CsvImportLoader'] ?? $this->getCsvImportLoaderService()), ($this->services['App\\Backend\\ImportProduct\\Business\\Model\\Create\\Product'] ?? $this->getProductService()), ($this->services['App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductImporter'] ?? $this->getProductImporterService()), 'dirname(__DIR__, 2).\'../import/');
    }

    /**
     * Gets the public 'App\Backend\ImportProduct\Business\Model\IntegrityManager\CategoryIntegrityManager' shared service.
     *
     * @return \App\Backend\ImportProduct\Business\Model\IntegrityManager\CategoryIntegrityManager
     */
    protected function getCategoryIntegrityManagerService()
    {
        return $this->services['App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\CategoryIntegrityManager'] = new \App\Backend\ImportProduct\Business\Model\IntegrityManager\CategoryIntegrityManager(($this->privates['Cycle\\ORM\\ORM'] ?? $this->getORMService()));
    }

    /**
     * Gets the public 'App\Backend\ImportProduct\Business\Model\IntegrityManager\ValueIntegrityManager' shared service.
     *
     * @return \App\Backend\ImportProduct\Business\Model\IntegrityManager\ValueIntegrityManager
     */
    protected function getValueIntegrityManagerService()
    {
        return $this->services['App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\ValueIntegrityManager'] = new \App\Backend\ImportProduct\Business\Model\IntegrityManager\ValueIntegrityManager();
    }

    /**
     * Gets the public 'App\Backend\ImportProduct\Business\Model\Update\ProductCategory' shared service.
     *
     * @return \App\Backend\ImportProduct\Business\Model\Update\ProductCategory
     */
    protected function getProductCategoryService()
    {
        return $this->services['App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductCategory'] = new \App\Backend\ImportProduct\Business\Model\Update\ProductCategory(($this->services['App\\Client\\Category\\Business\\CategoryBusinessFacade'] ?? $this->getCategoryBusinessFacadeService()), ($this->services['App\\Client\\Product\\Business\\ProductBusinessFacade'] ?? $this->getProductBusinessFacadeService()), ($this->services['App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\CategoryIntegrityManager'] ?? $this->getCategoryIntegrityManagerService()), ($this->services['App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\ValueIntegrityManager'] ?? ($this->services['App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\ValueIntegrityManager'] = new \App\Backend\ImportProduct\Business\Model\IntegrityManager\ValueIntegrityManager())));
    }

    /**
     * Gets the public 'App\Backend\ImportProduct\Business\Model\Update\ProductImporter' shared service.
     *
     * @return \App\Backend\ImportProduct\Business\Model\Update\ProductImporter
     */
    protected function getProductImporterService()
    {
        return $this->services['App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductImporter'] = new \App\Backend\ImportProduct\Business\Model\Update\ProductImporter(($this->privates['App\\Backend\\ImportProduct\\Business\\Model\\ActionProvider'] ?? $this->getActionProviderService()));
    }

    /**
     * Gets the public 'App\Backend\ImportProduct\Business\Model\Update\ProductInformation' shared service.
     *
     * @return \App\Backend\ImportProduct\Business\Model\Update\ProductInformation
     */
    protected function getProductInformationService()
    {
        return $this->services['App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductInformation'] = new \App\Backend\ImportProduct\Business\Model\Update\ProductInformation(($this->services['App\\Client\\Product\\Business\\ProductBusinessFacade'] ?? $this->getProductBusinessFacadeService()), ($this->services['App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\ValueIntegrityManager'] ?? ($this->services['App\\Backend\\ImportProduct\\Business\\Model\\IntegrityManager\\ValueIntegrityManager'] = new \App\Backend\ImportProduct\Business\Model\IntegrityManager\ValueIntegrityManager())));
    }

    /**
     * Gets the public 'App\Client\Category\Business\CategoryBusinessFacade' shared service.
     *
     * @return \App\Client\Category\Business\CategoryBusinessFacade
     */
    protected function getCategoryBusinessFacadeService()
    {
        return $this->services['App\\Client\\Category\\Business\\CategoryBusinessFacade'] = new \App\Client\Category\Business\CategoryBusinessFacade(($this->services['App\\Client\\Category\\Persistence\\CategoryRepository'] ?? $this->getCategoryRepositoryService()), ($this->services['App\\Client\\Category\\Persistence\\CategoryEntityManager'] ?? $this->getCategoryEntityManagerService()));
    }

    /**
     * Gets the public 'App\Client\Category\Persistence\CategoryEntityManager' shared service.
     *
     * @return \App\Client\Category\Persistence\CategoryEntityManager
     */
    protected function getCategoryEntityManagerService()
    {
        return $this->services['App\\Client\\Category\\Persistence\\CategoryEntityManager'] = new \App\Client\Category\Persistence\CategoryEntityManager(($this->privates['Cycle\\ORM\\ORM'] ?? $this->getORMService()), ($this->services['App\\Client\\Category\\Persistence\\CategoryRepository'] ?? $this->getCategoryRepositoryService()));
    }

    /**
     * Gets the public 'App\Client\Category\Persistence\CategoryRepository' shared service.
     *
     * @return \App\Client\Category\Persistence\CategoryRepository
     */
    protected function getCategoryRepositoryService()
    {
        return $this->services['App\\Client\\Category\\Persistence\\CategoryRepository'] = new \App\Client\Category\Persistence\CategoryRepository(($this->services['App\\Client\\Category\\Persistence\\Mapper\\CategoryMapper'] ?? ($this->services['App\\Client\\Category\\Persistence\\Mapper\\CategoryMapper'] = new \App\Client\Category\Persistence\Mapper\CategoryMapper())), ($this->privates['Cycle\\ORM\\ORM'] ?? $this->getORMService()));
    }

    /**
     * Gets the public 'App\Client\Category\Persistence\Mapper\CategoryMapper' shared service.
     *
     * @return \App\Client\Category\Persistence\Mapper\CategoryMapper
     */
    protected function getCategoryMapperService()
    {
        return $this->services['App\\Client\\Category\\Persistence\\Mapper\\CategoryMapper'] = new \App\Client\Category\Persistence\Mapper\CategoryMapper();
    }

    /**
     * Gets the public 'App\Client\Product\Business\ProductBusinessFacade' shared service.
     *
     * @return \App\Client\Product\Business\ProductBusinessFacade
     */
    protected function getProductBusinessFacadeService()
    {
        return $this->services['App\\Client\\Product\\Business\\ProductBusinessFacade'] = new \App\Client\Product\Business\ProductBusinessFacade(($this->services['App\\Client\\Product\\Persistence\\ProductRepository'] ?? $this->getProductRepositoryService()), ($this->services['App\\Client\\Product\\Persistence\\ProductEntityManager'] ?? $this->getProductEntityManagerService()));
    }

    /**
     * Gets the public 'App\Client\Product\Persistence\Mapper\ProductMapper' shared service.
     *
     * @return \App\Client\Product\Persistence\Mapper\ProductMapper
     */
    protected function getProductMapperService()
    {
        return $this->services['App\\Client\\Product\\Persistence\\Mapper\\ProductMapper'] = new \App\Client\Product\Persistence\Mapper\ProductMapper();
    }

    /**
     * Gets the public 'App\Client\Product\Persistence\ProductEntityManager' shared service.
     *
     * @return \App\Client\Product\Persistence\ProductEntityManager
     */
    protected function getProductEntityManagerService()
    {
        return $this->services['App\\Client\\Product\\Persistence\\ProductEntityManager'] = new \App\Client\Product\Persistence\ProductEntityManager(($this->privates['Cycle\\ORM\\ORM'] ?? $this->getORMService()), ($this->services['App\\Client\\Product\\Persistence\\ProductRepository'] ?? $this->getProductRepositoryService()));
    }

    /**
     * Gets the public 'App\Client\Product\Persistence\ProductRepository' shared service.
     *
     * @return \App\Client\Product\Persistence\ProductRepository
     */
    protected function getProductRepositoryService()
    {
        return $this->services['App\\Client\\Product\\Persistence\\ProductRepository'] = new \App\Client\Product\Persistence\ProductRepository(($this->services['App\\Client\\Product\\Persistence\\Mapper\\ProductMapper'] ?? ($this->services['App\\Client\\Product\\Persistence\\Mapper\\ProductMapper'] = new \App\Client\Product\Persistence\Mapper\ProductMapper())), ($this->privates['Cycle\\ORM\\ORM'] ?? $this->getORMService()));
    }

    /**
     * Gets the public 'App\Client\User\Business\UserBusinessFacade' shared service.
     *
     * @return \App\Client\User\Business\UserBusinessFacade
     */
    protected function getUserBusinessFacadeService()
    {
        return $this->services['App\\Client\\User\\Business\\UserBusinessFacade'] = new \App\Client\User\Business\UserBusinessFacade(($this->services['App\\Client\\User\\Persistence\\UserRepository'] ?? $this->getUserRepositoryService()), ($this->services['App\\Client\\User\\Persistence\\UserEntityManager'] ?? $this->getUserEntityManagerService()));
    }

    /**
     * Gets the public 'App\Client\User\Persistence\Mapper\UserMapper' shared service.
     *
     * @return \App\Client\User\Persistence\Mapper\UserMapper
     */
    protected function getUserMapperService()
    {
        return $this->services['App\\Client\\User\\Persistence\\Mapper\\UserMapper'] = new \App\Client\User\Persistence\Mapper\UserMapper();
    }

    /**
     * Gets the public 'App\Client\User\Persistence\UserEntityManager' shared service.
     *
     * @return \App\Client\User\Persistence\UserEntityManager
     */
    protected function getUserEntityManagerService()
    {
        return $this->services['App\\Client\\User\\Persistence\\UserEntityManager'] = new \App\Client\User\Persistence\UserEntityManager(($this->privates['Cycle\\ORM\\ORM'] ?? $this->getORMService()), ($this->services['App\\Client\\User\\Persistence\\UserRepository'] ?? $this->getUserRepositoryService()));
    }

    /**
     * Gets the public 'App\Client\User\Persistence\UserRepository' shared service.
     *
     * @return \App\Client\User\Persistence\UserRepository
     */
    protected function getUserRepositoryService()
    {
        return $this->services['App\\Client\\User\\Persistence\\UserRepository'] = new \App\Client\User\Persistence\UserRepository(($this->services['App\\Client\\User\\Persistence\\Mapper\\UserMapper'] ?? ($this->services['App\\Client\\User\\Persistence\\Mapper\\UserMapper'] = new \App\Client\User\Persistence\Mapper\UserMapper())), ($this->privates['Cycle\\ORM\\ORM'] ?? $this->getORMService()));
    }

    /**
     * Gets the public 'App\Component\View' shared service.
     *
     * @return \App\Component\View
     */
    protected function getViewService()
    {
        return $this->services['App\\Component\\View'] = new \App\Component\View();
    }

    /**
     * Gets the public 'App\Frontend\Login\Communication\LoginController' shared service.
     *
     * @return \App\Frontend\Login\Communication\LoginController
     */
    protected function getLoginControllerService()
    {
        return $this->services['App\\Frontend\\Login\\Communication\\LoginController'] = new \App\Frontend\Login\Communication\LoginController(($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())), ($this->services['App\\Client\\User\\Business\\UserBusinessFacade'] ?? $this->getUserBusinessFacadeService()), ($this->services['App\\Service\\PasswordManager'] ?? ($this->services['App\\Service\\PasswordManager'] = new \App\Service\PasswordManager())), ($this->services['App\\Service\\SessionUser'] ?? ($this->services['App\\Service\\SessionUser'] = new \App\Service\SessionUser())), ($this->services['App\\Service\\SymfonyMailerManager'] ?? ($this->services['App\\Service\\SymfonyMailerManager'] = new \App\Service\SymfonyMailerManager())));
    }

    /**
     * Gets the public 'App\Frontend\Login\Communication\PasswordController' shared service.
     *
     * @return \App\Frontend\Login\Communication\PasswordController
     */
    protected function getPasswordControllerService()
    {
        return $this->services['App\\Frontend\\Login\\Communication\\PasswordController'] = new \App\Frontend\Login\Communication\PasswordController(($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())), ($this->services['App\\Client\\User\\Business\\UserBusinessFacade'] ?? $this->getUserBusinessFacadeService()), ($this->services['App\\Service\\PasswordManager'] ?? ($this->services['App\\Service\\PasswordManager'] = new \App\Service\PasswordManager())), ($this->services['App\\Service\\SessionUser'] ?? ($this->services['App\\Service\\SessionUser'] = new \App\Service\SessionUser())));
    }

    /**
     * Gets the public 'App\Frontend\Model\DetailController' shared service.
     *
     * @return \App\Frontend\Model\DetailController
     */
    protected function getDetailControllerService()
    {
        return $this->services['App\\Frontend\\Model\\DetailController'] = new \App\Frontend\Model\DetailController(($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())), ($this->services['App\\Client\\Product\\Business\\ProductBusinessFacade'] ?? $this->getProductBusinessFacadeService()));
    }

    /**
     * Gets the public 'App\Frontend\Model\ErrorController' shared service.
     *
     * @return \App\Frontend\Model\ErrorController
     */
    protected function getErrorControllerService()
    {
        return $this->services['App\\Frontend\\Model\\ErrorController'] = new \App\Frontend\Model\ErrorController(($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())));
    }

    /**
     * Gets the public 'App\Frontend\Model\HomeController' shared service.
     *
     * @return \App\Frontend\Model\HomeController
     */
    protected function getHomeControllerService()
    {
        return $this->services['App\\Frontend\\Model\\HomeController'] = new \App\Frontend\Model\HomeController(($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())));
    }

    /**
     * Gets the public 'App\Frontend\Model\ListController' shared service.
     *
     * @return \App\Frontend\Model\ListController
     */
    protected function getListControllerService()
    {
        return $this->services['App\\Frontend\\Model\\ListController'] = new \App\Frontend\Model\ListController(($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())), ($this->services['App\\Client\\Product\\Business\\ProductBusinessFacade'] ?? $this->getProductBusinessFacadeService()));
    }

    /**
     * Gets the public 'App\Frontend\Product\Business\ProductManager' shared service.
     *
     * @return \App\Frontend\Product\Business\ProductManager
     */
    protected function getProductManagerService()
    {
        return $this->services['App\\Frontend\\Product\\Business\\ProductManager'] = new \App\Frontend\Product\Business\ProductManager(($this->services['App\\Client\\Product\\Business\\ProductBusinessFacade'] ?? $this->getProductBusinessFacadeService()));
    }

    /**
     * Gets the public 'App\Frontend\Product\Communication\ProductController' shared service.
     *
     * @return \App\Frontend\Product\Communication\ProductController
     */
    protected function getProductControllerService()
    {
        return $this->services['App\\Frontend\\Product\\Communication\\ProductController'] = new \App\Frontend\Product\Communication\ProductController(($this->services['App\\Client\\Product\\Business\\ProductBusinessFacade'] ?? $this->getProductBusinessFacadeService()), ($this->services['App\\Service\\SessionUser'] ?? ($this->services['App\\Service\\SessionUser'] = new \App\Service\SessionUser())), ($this->services['App\\Frontend\\Product\\Business\\ProductManager'] ?? $this->getProductManagerService()), ($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())));
    }

    /**
     * Gets the public 'App\Frontend\User\Business\UserManager' shared service.
     *
     * @return \App\Frontend\User\Business\UserManager
     */
    protected function getUserManagerService()
    {
        return $this->services['App\\Frontend\\User\\Business\\UserManager'] = new \App\Frontend\User\Business\UserManager(($this->services['App\\Client\\User\\Business\\UserBusinessFacade'] ?? $this->getUserBusinessFacadeService()));
    }

    /**
     * Gets the public 'App\Frontend\User\Communication\DashboardController' shared service.
     *
     * @return \App\Frontend\User\Communication\DashboardController
     */
    protected function getDashboardControllerService()
    {
        return $this->services['App\\Frontend\\User\\Communication\\DashboardController'] = new \App\Frontend\User\Communication\DashboardController(($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())), ($this->services['App\\Service\\SessionUser'] ?? ($this->services['App\\Service\\SessionUser'] = new \App\Service\SessionUser())));
    }

    /**
     * Gets the public 'App\Frontend\User\Communication\UserController' shared service.
     *
     * @return \App\Frontend\User\Communication\UserController
     */
    protected function getUserControllerService()
    {
        return $this->services['App\\Frontend\\User\\Communication\\UserController'] = new \App\Frontend\User\Communication\UserController(($this->services['App\\Client\\User\\Business\\UserBusinessFacade'] ?? $this->getUserBusinessFacadeService()), ($this->services['App\\Service\\SessionUser'] ?? ($this->services['App\\Service\\SessionUser'] = new \App\Service\SessionUser())), ($this->services['App\\Component\\View'] ?? ($this->services['App\\Component\\View'] = new \App\Component\View())), ($this->services['App\\Service\\PasswordManager'] ?? ($this->services['App\\Service\\PasswordManager'] = new \App\Service\PasswordManager())), ($this->services['App\\Frontend\\User\\Business\\UserManager'] ?? $this->getUserManagerService()));
    }

    /**
     * Gets the public 'App\Service\DatabaseManager' shared service.
     *
     * @return \App\Service\DatabaseManager
     */
    protected function getDatabaseManagerService()
    {
        return $this->services['App\\Service\\DatabaseManager'] = new \App\Service\DatabaseManager();
    }

    /**
     * Gets the public 'App\Service\File\FileServiceClient' shared service.
     *
     * @return \App\Service\File\FileServiceClient
     */
    protected function getFileServiceClientService()
    {
        return $this->services['App\\Service\\File\\FileServiceClient'] = new \App\Service\File\FileServiceClient(($this->services['App\\Service\\File\\Model\\Get'] ?? $this->getGetService()), ($this->services['App\\Service\\File\\Model\\Move'] ?? ($this->services['App\\Service\\File\\Model\\Move'] = new \App\Service\File\Model\Move())));
    }

    /**
     * Gets the public 'App\Service\File\Model\Get' shared service.
     *
     * @return \App\Service\File\Model\Get
     */
    protected function getGetService()
    {
        return $this->services['App\\Service\\File\\Model\\Get'] = new \App\Service\File\Model\Get(($this->services['Symfony\\Component\\Finder\\Finder'] ?? ($this->services['Symfony\\Component\\Finder\\Finder'] = new \Symfony\Component\Finder\Finder())));
    }

    /**
     * Gets the public 'App\Service\File\Model\Move' shared service.
     *
     * @return \App\Service\File\Model\Move
     */
    protected function getMoveService()
    {
        return $this->services['App\\Service\\File\\Model\\Move'] = new \App\Service\File\Model\Move();
    }

    /**
     * Gets the public 'App\Service\PasswordManager' shared service.
     *
     * @return \App\Service\PasswordManager
     */
    protected function getPasswordManagerService()
    {
        return $this->services['App\\Service\\PasswordManager'] = new \App\Service\PasswordManager();
    }

    /**
     * Gets the public 'App\Service\SessionUser' shared service.
     *
     * @return \App\Service\SessionUser
     */
    protected function getSessionUserService()
    {
        return $this->services['App\\Service\\SessionUser'] = new \App\Service\SessionUser();
    }

    /**
     * Gets the public 'App\Service\SymfonyMailerManager' shared service.
     *
     * @return \App\Service\SymfonyMailerManager
     */
    protected function getSymfonyMailerManagerService()
    {
        return $this->services['App\\Service\\SymfonyMailerManager'] = new \App\Service\SymfonyMailerManager();
    }

    /**
     * Gets the public 'Symfony\Component\Finder\Finder' shared service.
     *
     * @return \Symfony\Component\Finder\Finder
     */
    protected function getFinderService()
    {
        return $this->services['Symfony\\Component\\Finder\\Finder'] = new \Symfony\Component\Finder\Finder();
    }

    /**
     * Gets the private 'App\Backend\ImportProduct\Business\Model\ActionProvider' shared service.
     *
     * @return \App\Backend\ImportProduct\Business\Model\ActionProvider
     */
    protected function getActionProviderService()
    {
        return $this->privates['App\\Backend\\ImportProduct\\Business\\Model\\ActionProvider'] = new \App\Backend\ImportProduct\Business\Model\ActionProvider(($this->services['App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductCategory'] ?? $this->getProductCategoryService()), ($this->services['App\\Backend\\ImportProduct\\Business\\Model\\Update\\ProductInformation'] ?? $this->getProductInformationService()));
    }

    /**
     * Gets the private 'Cycle\ORM\ORM' shared service.
     *
     * @return \Cycle\ORM\ORM
     */
    protected function getORMService()
    {
        return $this->privates['Cycle\\ORM\\ORM'] = \App\Service\DatabaseManager::connect();
    }

    public function getParameter(string $name)
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
    }

    protected function getDefaultParameters(): array
    {
        return [
            'path' => 'dirname(__DIR__, 2).\'../import/',
        ];
    }
}
